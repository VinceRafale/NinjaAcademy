package com.efzgames.ninjaacademy.elements;

import com.efzgames.framework.gl.Animation;
import com.efzgames.framework.gl.SpriteBatcher;
import com.efzgames.framework.gl.Texture;
import com.efzgames.framework.gl.TextureRegion;
import com.efzgames.framework.impl.GLGame;
import com.efzgames.framework.math.Vector2;
import com.efzgames.ninjaacademy.screens.GameScreen;

public class StraightLineMovementComponent extends AnimatedComponent {	

	private Vector2 velocity;
	private float distance;
	private boolean isEventFired = true;
	
	public EventHandler finishedMoving;
	
	public StraightLineMovementComponent(GLGame glGame, GameScreen gameScreen,
			Animation animation) {
		super(glGame, gameScreen, animation);

	}
	
	public StraightLineMovementComponent(GLGame glGame, GameScreen gameScreen,
			Texture texture, TextureRegion textureRegion) {
		super(glGame, gameScreen, texture, textureRegion);
	}
	
	@Override
	public synchronized void update(float deltaTime) {		
		 super.update(deltaTime);
		
         float elapsedSeconds = (float)deltaTime;

         Vector2 movement = Vector2.mul(velocity , elapsedSeconds);
         position = Vector2.add(position, movement);
         distance -= movement.len();

         // Check whether the event generated by reaching the destination needs to be fired.
         if (!isEventFired && distance <= 0)
         {
             // Move back in case we moved too much
             velocity.nor();
             position = position.add(Vector2.mul( velocity , distance));

             // Fire the event and stop moving
             if (finishedMoving != null)
             {
                 finishedMoving.onEvent(this);
             }

             isEventFired = true;
             velocity = Vector2.zero;
         }
	}

	@Override
	public synchronized void present(float deltaTime, SpriteBatcher batcher) {
		batcher.beginBatch(texture);
		animation.present(deltaTime, batcher, position, 0 , visualCenter);	
		batcher.endBatch();
	}
	
	
	public synchronized void moveWithVelocity(float velocity, Vector2 initialPosition, Vector2 destination)
    {
        if (velocity <= 0)
        {
            throw new IllegalArgumentException("velocity Argument must be greater than 0.");
        }

        Vector2 toDestinationVector = Vector2.sub(destination , initialPosition);
        Vector2 velocityUnitVector = new Vector2(toDestinationVector);
        velocityUnitVector.nor();

        this.velocity = Vector2.mul(velocityUnitVector , velocity);
        this.distance = toDestinationVector.len();
        position = initialPosition;
        isEventFired = false;
    }
	
	
	public synchronized  void moveWithTime(float time, Vector2 initialPosition, Vector2 destination)
    {
        if (time <= 0)
        {
            throw new IllegalArgumentException("time Argument must be a positive time span.");
        }

        Vector2 toDestinationVector =  Vector2.sub(destination , initialPosition);
        float distance = toDestinationVector.len();

        float requiredVelocity = distance / (float)time;

        moveWithVelocity(requiredVelocity, initialPosition, destination);
    }
	
	
}
